/**
 * @file    amracut.h.in
 * @author  Budvin Edippuliarachchi
 * @brief   Interface for amracut
 * @version 1.0
 * @date    2025-07-08
 * 
 * @copyright Copyright (c) 2025
 * 
 */

#ifndef AMRACUT_H__
#define AMRACUT_H__

#include <inttypes.h>
#include "mpi.h"
#include <stdbool.h>

#cmakedefine AMRACUT_INTEGER_WIDTH @AMRACUT_INTEGER_WIDTH@

#if AMRACUT_INTEGER_WIDTH == 64
typedef uint64_t  amracut_uint_t;
typedef int64_t   amracut_sint_t;
#elif AMRACUT_INTEGER_WIDTH == 32
typedef uint32_t  amracut_uint_t;
typedef int32_t   amracut_sint_t;
#elif AMRACUT_INTEGER_WIDTH == 16
typedef uint16_t  amracut_uint_t;
typedef int16_t   amracut_sint_t;

#else
#error "Invalid AMRACUT_INTEGER_WIDTH specified. Allowed values: 16, 32, 64"
#endif

#define AMRACUT_UNWEIGHTED         0
#define AMRACUT_VTX_WEIGHTED       1
#define AMRACUT_EDGE_WEIGHTED      2
#define AMRACUT_VTX_EDGE_WEIGHTED  3



#ifdef __cplusplus
extern "C"
{
#endif

  /**
   * @brief Opaque object that holds all amracut internal data structures.
   * 
   */
  typedef struct
  {
    void *internal_;
  } amracut_ctrl;


  /**
   * @brief Initialize local graph structure and temporary buffers.
   * 
   * Must be called before `amracut_destroy` and `amracut_partgraph`.
   * 
   * Caller can reuse/free `ctrl`, `vtx_dist`, `xadj`, `adjncy`. Those are deep 
   * copied to internal buffers.
   * 
   * @param ctrl      Opaque object that holds internal data structures.
   * @param vtx_dist  Vertex range for each calling process. Process P_i stores 
   * the vertices from vtxdist[i] up to (not including) vertex vtxdist[i + 1]
   * @param xadj      local graph structure CSR encoding pointers.
   * @param adjncy    local graph structure CSR encoding values.
   * @param vwgt      Local vertex weights
   * @param adjwgt    Edge weights
   * @param wgtflag   Flag to indicate if the graph is weighted. 
   *                  Should be one of 
   *                    `AMRACUT_UNWEIGHTED
   *                     AMRACUT_VTX_WEIGHTED, 
   *                     AMRACUT_EDGE_WEIGHTED, 
   *                     AMRACUT_VTX_EDGE_WEIGHTED`
   * @param comm      MPI communicator.
   * @return amracut_uint_t 
   * 
   * @note            If the graph is weighted, `vwgt` should not be NULL
   */
  amracut_uint_t amracut_setup(amracut_ctrl *ctrl, const amracut_uint_t *vtx_dist,
                                const amracut_uint_t *xadj, const amracut_uint_t *adjncy,
                                const amracut_uint_t *vwgt, const amracut_uint_t *adjwgt, 
                                const amracut_uint_t wgtflag, MPI_Comm *comm);

  /**
   * @brief Destroy and free all internal data structures.
   * 
   * Should be called only after calling `amracut_setup`
   * 
   * @param ctrl      Opaque object that holds internal data structures.
   * @return amracut_uint_t 
   */
  amracut_uint_t amracut_destroy(amracut_ctrl *ctrl);

  /**
   * @brief Compute graph partitioning
   * 
   * Should be called only after calling `amracut_setup`
   * 
   * @param ctrl          Opaque object that holds internal data structures.
   * @param parts         Output of computed partition labels in range [0, p -1]. 
   * Must be initialized by the caller to hold labels for locally owned vertices.
   * @param use_diffucion Boolean flag to enable diffusion step for refinement
   * @param verbose   verbosity level for performance stats
   * @return amracut_uint_t 
   */
  amracut_uint_t amracut_partgraph(amracut_ctrl *ctrl, amracut_uint_t *parts, bool use_diffusion, int verbose);


  typedef struct
  {
    amracut_uint_t rank;
    amracut_uint_t trank;
    amracut_uint_t eid;
    amracut_uint_t localid;
    amracut_uint_t coord[3];
    amracut_uint_t e2e[6];
    amracut_uint_t level;
  } oct_element;
  

  /**
   * @brief Compute graph partitioning for octree element graph
   * 
   * This function is a wrapper on top of `amracut_setup, amracut_partgraph, amracut_destroy`.
   * Hence should be called directly without calling those functions.
   * 
   * @param vtx_dist        Vertex range for each calling process. Calling process P_i has local element ids 
   *                        from `vtxdist[i]` up to (but not including) `vtxdist[i + 1]`.
   *                        `vtxdist` should be a non decreasing vector.
   * 
   * @param local_elements  Array of `oct_element` containing element connectivity
   * 
   * @param parts           Output of computed partition labels in range [0, p -1]. 
   *                        Must be already initialized by the caller to hold labels for locally owned vertices.
   * 
   * @param comm            MPI communicator.
   * @return amracut_uint_t 
   */
  amracut_uint_t amracut_partgraph_octree( const amracut_uint_t *vtx_dist,
                                            const oct_element* local_elements, amracut_uint_t *parts, 
                                            MPI_Comm *comm);

#ifdef __cplusplus
}
#endif

#endif /*AMRACUT_H__*/